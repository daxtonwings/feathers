---
title: "异步：从并发到Python协程"
---

* **[从计算机原理开始](#从计算机原理开始)**
    * [什么是并发](#什么是并发)
    * [为什么并发](#为什么要并发)
    * [如何并发](#如何并发)
        * [进程、线程、协程](#进程线程协程)
        * [函数调用栈](#函数调用栈)

## 从计算机原理开始

> 参考 「深入理解计算机系统Computer System」

### 什么是并发

术语**并发(concurrency)**，指系统能同时处理多个任务的能力。
多个任务动作并非同时发生，是系统通过在多个任务间频繁切换运行，模拟达到多个任务同时运行的效果。
并发强调的是系统对多任务的交替执行与管理。
例如，一个单核CPU上运行了多个进程任务，每个任务运行一段时间后会被暂停以开始其他任务执行，
并在未来某时刻继续运行。

术语**并行(parallelism)**，指系统在同一时刻同时执行多个任务，强调的是多个任务在同一时刻同时执行。
例如，一个双核CPU上同时分别运行了进程A和进程B。

并发与并行的概念虽有区别，但非相互对立。并发是一种达到并行的手段，并行也要靠并发管理。
场景一，操作系统执行I/O操作时会切换至其他任务运行，
对于CPU而言是暂停了I/O操作开始了其他的操作，但对于系统而言，I/O操作和其他操作是并行的。
场景二，现代CPU在执行多控制流任务时，在等待数据装载至高速缓存时可以继续执行其它控制流任务。
场景三，现代CPU采用了流水线执行形式，实际上指令不是独占式的排队执行的，而是同时处理多条指令。


### 为什么要并发

反向思考：如果系统只能依次处理单个任务，不能并发会怎么样？

- 情景一：鼠标点击启动应用程序时，直到应用程序退出前鼠标将毫无响应；
- 情景二：在保持文件时，整个系统等待硬盘的操作；

当下，计算机系统中到处存在着并发，使用计算机的我们习惯的认为并发是系统自然的结果。
但事实上，所有的并发都得由程序特别实现的处理逻辑，
比如在UI操作代码中要启动多个线程分别处理前、后端的执行逻辑，这样底层的运行不会造成前端UI无响应。

不过，并发的核心目标是要让系统的每个组件（CPU、GPU、硬盘）避免空闲、高效运转，
是要榨取高性能组件的闲置能力。而非通过并发把一个低性能的CPU变成一个高性能的CPU。


### 如何并发

#### 进程、线程、协程

计算机的并发场景很多，应用开发中可以控制的并发主要有进程、线程、协程三种形式。

**进程**：进程是操作系统对正在运行的程序的抽象。
一个操作系统上可以同时运行多个进程，每个进程都好像独占的使用硬件资源。
无论是单核还是多核系统中，一个CPU看上去都像是在并发的执行多个进程，这是通过处理器在进程间切换实现的。
操作系统实现这种交错执行的机制称为“**上下文切换**”。
上下文包括许多信息，比如PC(程序计数器)和CPU寄存器，以及主存储器的内容。
当操作系统决定要把控制权从当前进程转移到另一个进程时，就会进行“上下文切换”。

进程的上下午切换通常发生在应用程序执行系统调用(system call)指令时。
当执行系统调用指令时，比如读写文件，应用层代码将控制权传递给内核。
内核根据一些条件（进程的累计运行时间，系统调用是否阻塞）选择判断，
是继续执行当前进程，还是切换执行其它进程。

**线程**：线程是比进程轻量的调度单元，不同操作系统有各自的进程-线程模型。
有些操作系统在内核中负责线程调度，有些操作系统将线程调度留给应用层实现。
对于Linux来说，线程和进程一样是在操作系统内核中调度的。
这里，线程比进程更轻量是指，在相同进程的多个线程之间切换时，需要切换的上下文信息更少。
比如：线程不需要切换整个虚拟内存空间，仅需要切换线程运行栈信息。

**协程**：协程是更加轻量级的调度单元，通常是在应用层调度，而不是在内核中调度。
不过，在不同的开发语言中，协程表示的具体含义有较大的区别。
比如：c++20标准中的coroutine特指无栈协程，其调度控制由编译器根据协程代码补充实现；
go中的协程指goroutine，是MPG模型的基本调度单元，由go的运行时环境负责调度；
python中的协程指由async语法定义的函数，由内置asyncio模块依赖I/O多路复用的方式调度。


#### 函数调用栈

无论高级语言多么复杂，对底层CPU来说全部要还原至指令语句。
指令语句组合形成的首个高级抽象单元是“过程”，在高级语言中是function、subroutine等。
当发生过程调用时，比如过程P调用了过程Q，有一些必要的动作，包括：
（1）保持当前过程P的信息，（2）准备过程Q的调用栈，（3）更新“程序计数器”PC转移下一个指令语句位置。
当发生过程调用命令`call Q`时，
首先将返回指令地址(即过程P的下一条指令地址)压入栈中, 并更新栈指针为新的过程Q在内存栈上分配空间。
然后, 将PC设置为过程Q的起始指令位置开始执行。
最后，当过程Q执行完毕时，通过回退栈指针清除过程Q的栈帧，
接着从栈中弹出过程P的返回指令地址作为PC值，从而继续执行过程P。

协程，也属于过程，需要有自己的内存空间。
若在内存栈上分配协程存储空间时，称为有栈协程；
若在内存堆上分配协程存储空间时，称为无栈协程。


## 协程

重新正式地为协程给出定义：

协程是一个计算机过程，
这个过程允许被**暂停**及**恢复**，从而实现了协作式的多任务并发。

- 与传统过程相比，协程允许暂停与恢复
- 与多进程、多线程的并发时控制权被动切换相比，多协程的控制权切换是主动转移的，发生在协程的暂停位置，
因此多协程实现的是协作式的并发。与之相对，多进程、多线程是抢占式并发。


## 异步与协程

I/O阻塞对异步的需求
独立计算的并行需求

协程，应用代码交换执行片段

## yield与Generator

Python的Generator语法
```python
def g():
    i = 1
    yield i
    i += 1

a = g()  # a is a generator
next(a)  # out 1
next(a)  # raise StopIteration
```

- `a=g()`为协程内变量准备储存空间
- `yield`表示函数主动让出执行条件，保存当前状态
- `next(a)`: 第一次为进入协程，第二次为继续运行